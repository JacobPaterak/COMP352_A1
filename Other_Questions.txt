Jacob Paterak ID: 40268958
Joshua Graham ID: 40285958


a,) Algorithm Linear Oddonocci(x)
        storage[3]
        i  ← 0
        j  ← 0
        k  ← 0
        if(x= 1 or x = 2 or x = 3)
            storage[0]  ← 1
            storage[1]  ← 1
            storage[2]  ← 1
            return storage
        else
            storage = Oddonocci(x-1)
            i  ← storage[0]
            j  ← storage[1]
            k  ← storage[2]
            next  ← i + j + k
            a[0]  ← next
            a[1]  ← i
            a[2]  ← j
            return storage

Algorithm Multiple Oddonacci(x)
        if (x=1 or x=2 or x=3)
        return 1

        else
        return Oddonacci(x-1) + Oddonacci(x-2) + Oddonacci(x-3)

       


b,) The first algorithm which uses multiple calls (Oddonacci_Multiple) simply requires the method to return oddonacci(x-1) + ..(x-2) +...(x-3).
For each itteration in the oddonacci sequence the system must call the the method 3 times and each time it must itterate back to the base case.
For that reason this program has a time complexity of O(3^x). The second algorithm of linear complexity prevents the bottle neck of having to itterate back to the base case (which becomes exponentially more time consuming) by storing the previous three integers in an array. This drastically improves the speed of the algorithm changing it to O(n).



c,) No it is not a tail Recursive algorithm because the call to the function is not the last thing to happen
    ii,)You could solve it using tail recursion but you would have to use a helper function
